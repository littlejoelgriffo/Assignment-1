#include <Adafruit_GFX.h>
#include <Adafruit_SPITFT.h>
#include <Adafruit_SPITFT_Macros.h>
#include <gfxfont.h>

//Global Variables for moving median:
int numReadings = 100; // number of samples to take
int median = 0;      // median of the sorted samples
int readingNumber;   // counter for the sample array
byte position = 0;
int analogValues[100];
//Global variables for moving median ^^

//Global Variables for moving average ECG:
//*************************************
//****Important Variable to play with:
const int no_averages = 2; 
//**************************************
unsigned long time = 0, peak1 = 0, peak2 = 0;
int binaryrange, bpm, i=0; //not sure what i does tbh
int threshold = 0;
int readings[no_averages]; // the readings from the analog input
int readIndex = 0; // the index of the current reading
int total = 0; // the running total
int average = 0; // the average which we will display as ECG


void setup() {
// initialize serial communication with computer:
Serial.begin(115200);
// initialize all the readings to 0:
for (int thisReading = 0; thisReading < no_averages; thisReading++) {
readings[thisReading] = 0;
}
}


void loop() {
time = millis();
//*************************************************
//***Moving Average ECG code & Serial Print the average
//*************************************************
average=0;
readings[readIndex] = analogRead(A0);
readIndex++;
for (int ir=0; ir < no_averages; ir++) {
  average = average + readings[ir];
}
if (readIndex >= no_averages) {    // ...wrap around to the beginning of array if it has hit the end:
readIndex = 0;
}
average = average/no_averages;
Serial.print(average);

//*************************************************
//***Experimental Median Shart (to determine BPM threshold)
//*************************************************
for (readingNumber = 0; readingNumber < numReadings; readingNumber++) {
    //get the reading:
    analogValues[readingNumber] = average;
    readingNumber++;
  }
    int out, in, swapper;
  for(out=0 ; out < numReadings; out++) {  // outer loop
    for(in=out; in<(numReadings-1); in++)  {  // inner loop
      if( analogValues[in] > analogValues[in+1] ) { 
        // swap them:
        swapper = analogValues[in];
        analogValues [in] = analogValues[in+1];
        analogValues[in+1] = swapper;
          }
  }
}
  median = analogValues[numReadings / 2]; //gets the median
  threshold=median+60;
//^^ Experimental median shart

//***************
//***BPM Code:
//***************
threshold=410; //if shit goes wrong with bpm, activate and play with value
if (average<threshold){
  binaryrange=0; }
if (average>threshold && binaryrange==0){
  peak1=peak2;
  peak2=time;
  bpm=60000/(peak2-peak1);
  binaryrange=1;
  } 
   Serial.print(" ");
  Serial.println(bpm);
//BPM code ^^


delay(8); // delay in between reads for stability
i++; 
}
